{"version":3,"sources":["components/Filter.js","services/people.js","components/PersonForm.js","components/People.js","components/Notifications.js","App.js","index.js"],"names":["Filter","newSearch","handleSearch","value","onChange","baseUrl","directoryService","getAll","axios","get","create","newObject","post","update","id","put","remove","delete","PersonForm","people","setPeople","newName","setNewName","newNumber","setNewNumber","handleNameChange","handleNumberChange","setNotificationMessage","setErrorMessage","onSubmit","e","preventDefault","personObject","name","number","i","toLowerCase","includes","window","confirm","then","res","data","setTimeout","catch","error","filter","p","alert","length","concat","required","type","People","map","person","onClick","handleClick","Notification","message","className","App","useState","setNewSearch","notificationMessage","errorMessage","useEffect","filteredPeople","info","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.110f3d38.chunk.js","sourcesContent":["const Filter = ({ newSearch, handleSearch }) => {\n  return (\n    <div>\n      search by name or number:{' '}\n      <input value={newSearch} onChange={handleSearch} />\n    </div>\n  );\n};\n\nexport default Filter;\n","import axios from 'axios';\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n  return axios.get(baseUrl);\n};\n\nconst create = (newObject) => {\n  return axios.post(baseUrl, newObject);\n};\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject);\n};\n\nconst remove = (id) => {\n  return axios.delete(`${baseUrl}/${id}`);\n};\n\nconst directoryService = {\n  getAll,\n  create,\n  update,\n  remove,\n};\n\nexport default directoryService;\n","import directoryService from '../services/people';\n\nconst PersonForm = ({\n  people,\n  setPeople,\n  newName,\n  setNewName,\n  newNumber,\n  setNewNumber,\n  handleNameChange,\n  handleNumberChange,\n  setNotificationMessage,\n  setErrorMessage,\n}) => {\n  const addPerson = (e) => {\n    e.preventDefault();\n    const personObject = {\n      name: newName,\n      number: newNumber,\n    };\n    // Check if person already exists in directory.\n    for (let i = 0; i < people.length; i++) {\n      if (\n        people[i].name.toLowerCase().includes(personObject.name.toLowerCase())\n      ) {\n        // If person exists but phone number entered is different than in directory, prompt to update number\n        if (\n          window.confirm(\n            `${personObject.name} already exists with phone number: ${people[i].number}, replace the old number with ${personObject.number}?`\n          )\n        ) {\n          // On prompt confirm, update number in directory, fetch all directory listings and display\n          directoryService\n            .update(people[i].id, personObject)\n            .then(() => {\n              directoryService.getAll().then((res) => setPeople(res.data));\n              setNotificationMessage(\n                `Successfully updated ${people[i].name} number to: ${newNumber}`\n              );\n              setTimeout(() => {\n                setNotificationMessage(null);\n              }, 2000);\n            })\n            .catch((error) => {\n              setErrorMessage(\n                `Information for ${people[i].name} has already been removed from the server`\n              );\n              setTimeout(() => {\n                setErrorMessage(null);\n              }, 3000);\n\n              setPeople(people.filter((p) => p.id !== people[i].id));\n            });\n        }\n        setNewName('');\n        setNewNumber('');\n        return people;\n      }\n      // Check if number already belongs to person in directory and alert if true\n      if (people[i].number === personObject.number) {\n        alert(`${personObject.number} already belongs to ${people[i].name}`);\n\n        setNewName('');\n        setNewNumber('');\n        return people;\n      }\n    }\n    // Create new directory listing from personObject (name, phone)\n    directoryService.create(personObject).then((res) => {\n      setPeople(people.concat(res.data));\n      setNewName('');\n      setNewNumber('');\n      setNotificationMessage(\n        `Successfully added ${personObject.name} (${personObject.number})`\n      );\n      setTimeout(() => {\n        setNotificationMessage(null);\n      }, 2000);\n    });\n  };\n\n  return (\n    <div>\n      <h2>Add a new</h2>\n      <form onSubmit={addPerson}>\n        <div>\n          name: <input required value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n          number:\n          <input required value={newNumber} onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type='submit'>add</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default PersonForm;\n","import directoryService from '../services/people';\n\nconst People = ({ people, setPeople, setNotificationMessage }) => {\n  // On delete click > prompt for confirmation > delete entry from directory > filter and re-render directory\n  const handleClick = (person) => {\n    if (window.confirm(`Delete ${person.name}? This cannot be undone`)) {\n      directoryService.remove(person.id).then(() => {\n        setPeople(people.filter((p) => p.id !== person.id));\n        setNotificationMessage(`Successfully deleted ${person.name} `);\n        setTimeout(() => {\n          setNotificationMessage(null);\n        }, 2000);\n      });\n    }\n  };\n\n  return (\n    <div>\n      <h2>Numbers</h2>\n      {people.map((person) => (\n        <p key={person.id}>\n          {person.name} {person.number}{' '}\n          <button onClick={() => handleClick(person)}>delete</button>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default People;\n","const Notification = ({ message, error }) => {\n  if (message === null) {\n    return null;\n  }\n  if (error === null) {\n    return null;\n  }\n\n  return (\n    <div className={error ? 'error' : 'notification'}>\n      {error ? error : message}\n    </div>\n  );\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport People from './components/People';\nimport directoryService from './services/people';\nimport Notification from './components/Notifications';\n\nconst App = () => {\n  // State handlers //\n  const [people, setPeople] = useState([]);\n  const [newSearch, setNewSearch] = useState('');\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [notificationMessage, setNotificationMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  // Effect handlers //\n\n  useEffect(() => {\n    directoryService.getAll().then((res) => {\n      setPeople(res.data);\n    });\n  }, []);\n\n  // Event handlers //\n  const handleSearch = (e) => {\n    setNewSearch(e.target.value);\n  };\n  const handleNameChange = (e) => {\n    setNewName(e.target.value);\n  };\n\n  const handleNumberChange = (e) => {\n    setNewNumber(e.target.value);\n  };\n\n  // Search filter //\n  const filteredPeople = people.filter((info) => {\n    if (newSearch === '') {\n      return info;\n    } else if (\n      info.name.toLowerCase().includes(newSearch.toLowerCase()) ||\n      info.number.includes(newSearch)\n    ) {\n      return info;\n    }\n    return false;\n  });\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={notificationMessage} />\n      <Notification error={errorMessage} />\n      <Filter\n        people={people}\n        value={newSearch}\n        setNewSearch={setNewSearch}\n        handleSearch={handleSearch}\n      />\n      <PersonForm\n        people={people}\n        setPeople={setPeople}\n        newName={newName}\n        newNumber={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        setNewName={setNewName}\n        setNewNumber={setNewNumber}\n        setNotificationMessage={setNotificationMessage}\n        setErrorMessage={setErrorMessage}\n      />\n      <People\n        people={filteredPeople}\n        setPeople={setPeople}\n        setNotificationMessage={setNotificationMessage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}